// input_handler.go
package main

import (
	"github.com/hajimehoshi/ebiten/v2"
)

type InputHandler struct{}

func NewInputHandler() *InputHandler {
	return &InputHandler{}
}

func (ih *InputHandler) HandleInput(world *World) {
	player := world.GetPlayerCharacter()
	if player == nil {
		return
	}

	dx, dy := 0.0, 0.0

	if ebiten.IsKeyPressed(ebiten.KeyArrowLeft) {
		dx -= 1
	}
	if ebiten.IsKeyPressed(ebiten.KeyArrowRight) {
		dx += 1
	}
	if ebiten.IsKeyPressed(ebiten.KeyArrowUp) {
		dy -= 1
	}
	if ebiten.IsKeyPressed(ebiten.KeyArrowDown) {
		dy += 1
	}

	player.Move(dx, dy, world)
}

// character.go
package main

import (
	"math"
)

type Character struct {
	X, Y     float64
	Name     string
	Speed    float64
	IsPlayer bool
}

func NewCharacter(x, y float64, name string) Character {
	return Character{
		X:        x,
		Y:        y,
		Name:     name,
		Speed:    2.0,
		IsPlayer: name == "Player",
	}
}

func (c *Character) Update(w *World) {
	// Update character logic
	// This could include AI for NPCs, or be empty for the player character
	// as their movement is handled by input
}

func (c *Character) Move(dx, dy float64, w *World) {
	// Normalize diagonal movement
	if dx != 0 && dy != 0 {
		magnitude := math.Sqrt(dx*dx + dy*dy)
		dx /= magnitude
		dy /= magnitude
	}

	newX := c.X + dx*c.Speed
	newY := c.Y + dy*c.Speed

	// Simple collision detection with game boundaries
	if newX >= 0 && newX < float64(w.gameMap.Width) {
		c.X = newX
	}
	if newY >= 0 && newY < float64(w.gameMap.Height) {
		c.Y = newY
	}
}

// main.go
package main

import (
	"log"

	"github.com/hajimehoshi/ebiten/v2"
	"image/color"
)

type Game struct {
	world        *World
	camera       *Camera
	renderer     *Renderer
	inputHandler *InputHandler
}

func NewGame() *Game {
	world := NewWorld()
	// Create some initial characters
	world.AddCharacter(NewCharacter(100, 100, "Player"))
	world.AddCharacter(NewCharacter(200, 200, "NPC1"))
	world.AddCharacter(NewCharacter(300, 300, "NPC2"))

	return &Game{
		world:        world,
		camera:       NewCamera(),
		renderer:     NewRenderer(),
		inputHandler: NewInputHandler(),
	}
}

func (g *Game) Update() error {
	g.inputHandler.HandleInput(g.world)
	g.world.Update()
	g.camera.Update(g.world.GetPlayerCharacter())
	return nil
}

func (g *Game) Draw(screen *ebiten.Image) {
	g.renderer.Render(screen, g.world, g.camera)
}

func (g *Game) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
	return 640, 480
}

func main() {
	ebiten.SetWindowSize(640, 480)
	ebiten.SetWindowTitle("My 2D Top-Down Game")
	if err := ebiten.RunGame(NewGame()); err != nil {
		log.Fatal(err)
	}
}